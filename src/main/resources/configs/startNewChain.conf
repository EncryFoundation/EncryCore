{
  encry {
    # Directory to keep data
    directory = ${user.dir}"/encry/data"
    node {
      # Possible options are:
      # "utxo" - keep full utxo set, that allows to validate arbitrary block and generate ADProofs
      # "digest" - keep state root hash only and validate transactions via ADProofs
      stateMode = "utxo"
      # Download block transactions and verify them (requires BlocksToKeep == 0 if disabled)
      verifyTransactions = true
      # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.
      # Keep all blocks from genesis if negative
      blocksToKeep = -1
      # Maximum number of received from network modifiers, expecting applying
      modifiersCacheSize = 3000
      # Is the node is doing mining
      mining = true
      # Number of actors should be used for mining
      numberOfMiningWorkers = 3
      # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new
      # blockchain
      offlineGeneration = true
      # Delay for miner after succesful block creation
      miningDelay = 5s
      # The time during which the transaction is considered valid
      utxMaxAge = 1000m
      # Period of cleaning memory pool from expired transactions
      mempoolCleanupInterval = 180m
      # Maximum number of unconfirmed transactions, stored in memory pool
      mempoolMaxCapacity = 10000
      # Period of sending transactions from memory pool to miner
      mempoolTxSendingInterval = 10s
      # Period of cleaning bloom filter in memory pool
      bloomFilterCleanupInterval = 60m
      # Maximum number of elements in bloom filter
      bloomFilterCapacity = 10000
      # Bloom filter's failure probability
      bloomFilterFailureProbability = 0.01
      # Is CLI available
      useCli = true
    }
    # Set main db to node componet. Now avaliable iodb or LevelDb
    storage {
      state      = "iodb"
      auxHistory = "iodb"
      history    = "iodb"
    }
    # Set password to local wallet and mnemonic key
    wallet {
      password = ""
      seed = ""
    }
    levelDB {
      # Rollback max height
      maxVersions = 100
    }
    network {
      # Optional parameter. Used to display custom node name on api. Default node name is network address.
      // nodeName = ""
      # Address which node will use for network communication
      bindAddress = "0.0.0.0:9001"
      networkChunkSize = 1000
      localOnly = false
      # List of peers we will connecting to
      knownPeers = ["182.183.192.15:5785"]
      # Maximum number of connected peers
      maxConnections = 20
      # Time, after which connection will be closed
      connectionTimeout = 1s
      # Time of waiting handshake from other peer
      handshakeTimeout = 30s
      # Will we connect to peers, which are not in 'knownPeers'
      connectOnlyWithKnownPeers = false
      # Period of sending sync message
      syncInterval = 15s
      # Time of waiting peers on PeerSynchronizer from PeerManager
      syncTimeout = 5s
      # Number of modifiers in sync message
      syncPacketLength = 1000
      # Time of waiting requested modifier
      deliveryTimeout = 120s
      # Maximum number of re-ask requested modiifer
      maxDeliveryChecks = 5
      # Version of app
      appVersion = 0.9.3
      # Maximum number of modifiers in Inv network message
      maxInvObjects = 1000
      # Time of asking new modifiers
      modifierDeliverTimeCheck = 60s
    }
    restApi {
      # Is api available
      enabled = true
      # Address which node will use for http communication
      bindAddress = "0.0.0.0:9051"
      corsAllowed = true
      # Period, during which node must give response on http request
      timeout = 5s
    }
    # NTP settings
    ntp {
      server = "pool.ntp.org"
      updateEvery = 30m
      timeout = 30s
    }
    # Kamon settings
    monitoringSettings {
      kamonEnabled = false
    }
  }
}