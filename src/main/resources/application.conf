encry {
  # Directory to keep data
  directory = ${user.dir}"/encry/data"

  # Settings for node view holder regime. See papers.yellow.ModifiersProcessing.md
  node {
    # Possible options are:
    # "utxo" - keep full utxo set, that allows to validate arbitrary block and generate ADProofs
    # "digest" - keep state root hash only and validate transactions via ADProofs
    stateMode = "utxo"

    # Download block transactions and verify them (requires BlocksToKeep == 0 if disabled)
    verifyTransactions = true

    # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.
    # Keep all blocks from genesis if negative
    blocksToKeep = -1

    # Is the node is doing mining
    mining = true

    # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new
    # blockchain
    offlineGeneration = true

    # Delay for miner after succesful block creation
    miningDelay = 10s

    keepVersions = 200

    utxMaxAge = 1000m

    mempoolCleanupInterval = 180m

    mempoolMaxCapacity = 10000

    useCli = true
  }

  testing {
    # Turn on transaction generator
    transactionGeneration = false

    # If generator is enabled, it generates transactions when mempool size is smaller than keepPoolSize
    keepPoolSize = 100
  }

  keyManager {

    encryption = true
  }
}

scorex {
  network {
    bindAddress = "0.0.0.0:9001"
    networkChunkSize = 400
    nodeName = "encry-testnet"
    knownPeers = ["94.130.154.152:9001", "94.130.154.153:9001", "94.130.154.154:9001", "94.130.154.155:9001"]
    syncInterval = 15s
    syncStatusRefresh = 30s
    syncIntervalStable = 20s
    syncTimeout = 5s
    syncStatusRefreshStable = 1m
    deliveryTimeout = 8s
    maxDeliveryChecks = 2
    appVersion = 0.3.2
    agentName = "encry"
  }
  restApi {
    bindAddress = "0.0.0.0:9051"
    corsAllowed = true
    swaggerInfo {
      description = "The Web Interface to the Encry API",
      title = "Encry API",
      termsOfService = "License: Creative Commons CC0",
    }
  }
}

akka {
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
}