encry {
  # Directory to keep data
  directory = ${user.dir}"/encry/data"
  node {
    # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.
    # Keep all blocks from genesis if negative
    blocksToKeep = -1
    # Maximum number of received from network modifiers, expecting applying
    modifiersCacheSize = 3000
    # Is the node is doing mining
    mining = true
    # Number of actors should be used for mining
    numberOfMiningWorkers = 3
    # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new
    # blockchain
    offlineGeneration = false
    # Delay for miner after succesful block creation
    miningDelay = 5s
    # The time during which the transaction is considered valid
    utxMaxAge = 1000m
    # Period of cleaning memory pool from expired transactions
    mempoolCleanupInterval = 180m
    # Maximum number of unconfirmed transactions, stored in memory pool
    mempoolMaxCapacity = 10000
    # Period of sending transactions from memory pool to miner
    mempoolTxSendingInterval = 10s
    # Period of cleaning bloom filter in memory pool
    bloomFilterCleanupInterval = 60m
    # Maximum number of elements in bloom filter
    bloomFilterCapacity = 10000
    # Bloom filter's failure probability
    bloomFilterFailureProbability = 0.01
    # Is CLI available
    useCli = true
  }
  # Set main db to node componet. Now avaliable iodb or LevelDb
  storage {
    state = "iodb"
    auxHistory = "iodb"
    history = "iodb"
  }
  # Set password to local wallet and mnemonic key
  wallet {
    password = "encry"
    #seed    = ""
  }
  levelDB {
    # Rollback max height
    maxVersions = 100
  }
  network {
    # Optional parameter. Used to display custom node name on api. Default node name is network address.
    // nodeName = ""
    # Address which node will use for network communication
    bindAddress = "0.0.0.0:9001"
    networkChunkSize = 1000
    localOnly = false
    # List of peers we will connecting to
    knownPeers = ["172.16.11.11:9001", "172.16.11.12:9001", "172.16.11.13:9001", "172.16.11.14:9001",
      "172.16.11.15:9001", "172.16.11.16:9001", "172.16.11.17:9001", "172.16.11.18:9001",
      "172.16.11.19:9001", "172.16.11.20:9001"]
    # Maximum number of connected peers
    maxConnections = 20
    # Time, after which connection will be closed
    connectionTimeout = 1s
    # Time of waiting handshake from other peer
    handshakeTimeout = 30s
    # Will we connect to peers, which are not in 'knownPeers'
    connectOnlyWithKnownPeers = false
    # Period of sending sync message
    syncInterval = 15s
    # Time of waiting peers on PeerSynchronizer from PeerManager
    syncTimeout = 5s
    # Number of modifiers in sync message
    syncPacketLength = 1000
    # Time of waiting requested modifier
    deliveryTimeout = 120s
    # Maximum number of re-ask requested modiifer
    maxDeliveryChecks = 2
    # Version of app
    appVersion = 0.9.3
    # Maximum number of modifiers in Inv network message
    maxInvObjects = 1000
    # Time of asking new modifiers
    modifierDeliverTimeCheck = 60s
    maxNumberOfReConnections = 3
  }
  blackList {
    # Time which peer will contains in black list
    banTime = 60m
    # Time of cleaning period
    cleanupTime = 5s
  }
  restApi {
    # Is api available
    enabled = true
    # Address which node will use for http communication
    bindAddress = "0.0.0.0:9051"
    corsAllowed = true
    # Period, during which node must give response on http request
    timeout = 5s
  }
  # NTP settings
  ntp {
    server = "pool.ntp.org"
    updateEvery = 30m
    timeout = 30s
  }
  # Kamon settings
  monitoringSettings {
    kamonEnabled = false
  }
}
akka {
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  persistence.journal.plugin = akka.persistence.journal.leveldb
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 60s
  actor.warn-about-java-serializer-usage = false
}
mining-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 4
  throughput = 4
}
mining-mailbox {
  mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
  mailbox-capacity = 5
}
network-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 4
  throughput = 4
}
nvh-dispatcher {
  type = Dispatcher
  mailbox-type = "encry.view.NodeViewHolder$NodeViewHolderPriorityQueue"
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 4
  throughput = 1
}
nvh-mailbox {
  mailbox-type = "encry.view.NodeViewHolder$NodeViewHolderPriorityQueue"
  mailbox-capacity = 1000
}
kafka-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 1
  throughput = 1
}
aux-history-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 2
  throughput = 1
}
block-listener-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 2
  throughput = 1
}
delivery-manager-dispatcher {
  mailbox-type = "encry.network.DeliveryManager$DeliveryManagerPriorityQueue"
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 1
  throughput = 1
}
mempool-dispatcher {
  mailbox-type = "encry.view.mempool.Mempool$MempoolPriorityQueue"
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 1
  throughput = 1
}
nvsh-dispatcher {
  mailbox-type = "encry.network.NodeViewSynchronizer$NodeViewSynchronizerPriorityQueue"
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 3
  throughput = 1
}
peers-keeper-dispatcher {
  mailbox-type = "encry.network.PeersKeeper$PeersKeeperPriorityQueue"
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 2
  throughput = 1
}
Downloaded-Modifiers-Validator-dispatcher {
  mailbox-type = "encry.network.DownloadedModifiersValidator$DownloadedModifiersValidatorPriorityQueue"
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor.fixed-pool-size = 1
  throughput = 1
}