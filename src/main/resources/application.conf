{
  encry {
    # Directory to keep data
    directory = ${user.dir}"/encry/data"
    node {
      # Possible options are:
      # "utxo" - keep full utxo set, that allows to validate arbitrary block and generate ADProofs
      # "digest" - keep state root hash only and validate transactions via ADProofs
      stateMode = "utxo"
      # Download block transactions and verify them (requires BlocksToKeep == 0 if disabled)
      verifyTransactions = true
      # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.
      # Keep all blocks from genesis if negative
      blocksToKeep = -1
      # Is the node is doing mining
      mining = true
      # Number of threads should be used for mining
      numberOfMiningWorkers = 1
      # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new
      # blockchain
      offlineGeneration = true
      # Delay for miner after succesful block creation
      miningDelay = 5s
      utxMaxAge = 1000m
      mempoolCleanupInterval = 180m
      mempoolMaxCapacity = 10000
      useCli = false
      loggingMode = "file"
    }
    wallet {
      password = "encry"
    }
    levelDb {
      enableSave = false
      enableRestore = false
      batchSize = 1000
    }
    network {
      bindAddress = "0.0.0.0:9002"
      networkChunkSize = 1000
      localOnly = false
      knownPeers = []
      maxConnections = 20
      connectionTimeout = 1s
      handshakeTimeout = 30s
      connectOnlyWithKnownPeers = false
      syncInterval = 1m
      syncTimeout = 5s
      syncPacketLength = 1000
      deliveryTimeout = 5s
      maxDeliveryChecks = 5
      appVersion = 0.9.2
      maxInvObjects = 1000
      modifierDeliverTimeCheck = 30s
    }
    restApi {
      enabled = true
      bindAddress = "0.0.0.0:9051"
      corsAllowed = true
      swaggerInfo {
        description = "The Web Interface to the Encry API",
        title = "Encry API",
        termsOfService = "License: Creative Commons CC0",
      }
      timeout = 5s
    }
    ntp {
      server = "pool.ntp.org"
      updateEvery = 30m
      timeout = 30s
    }
    testing {
      defaultRecipientAddress = "3jSD9fwHEHJwHq99ARqhnNhqGXeKnkJMyX4FZjHV6L3PjbCmjG"
      minimalFee = 100
      amount = 100
      # Maximum number of transaction generated per one epoch, set to -1 to avoid limiting
      limitPerEpoch = 100
    }
  }
  akka {
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off
    persistence.journal.plugin = akka.persistence.journal.leveldb
    actor.warn-about-java-serializer-usage = false
    persistence {
      journal.leveldb {
        class = "akka.persistence.journal.leveldb.LeveldbJournal"
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
        replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"
        dir = "leveldb/journal"
        fsync = on
        checksum = off
        native = on
        compaction-intervals {}
      }
      snapshot-store.local {
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"
        dir = "leveldb/snapshots"
        max-load-attempts = 3
      }
    }
    actor {
      serializers {
        tx = "encry.modifiers.serialization.EncryTxSerializer"
        proofs = "encry.modifiers.serialization.EncryProofsSerializer"
        payload = "encry.modifiers.serialization.EncryPayloadSerializer"
        header = "encry.modifiers.serialization.EncryHeaderSerializer"
      }
      serialization-bindings {
        "encry.modifiers.mempool.Transaction" = tx
        "encry.modifiers.history.ADProofs" = proofs
        "encry.modifiers.history.Payload" = payload
        "encry.modifiers.history.Header" = header
      }
    }
  }
  mining-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor.fixed-pool-size = 1
    throughput = 1
  }
  mining-mailbox {
    mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
    mailbox-capacity = 5
  }
  network-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor.fixed-pool-size = 1
    throughput = 1
  }
  nvh-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor.fixed-pool-size = 1
    throughput = 1
  }
  nvh-mailbox {
    mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
    mailbox-capacity = 100000
  }
  kafka-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor.fixed-pool-size = 1
    throughput = 1
  }
}
