{
  encry {
    # Directory to keep data
    directory = ${user.dir}"/encry/data"
    dataDir = ${encry.directory}
    # Settings for node view holder regime. See papers.yellow.ModifiersProcessing.md
    node {
      # Possible options are:
      # "utxo" - keep full utxo set, that allows to validate arbitrary block and generate ADProofs
      # "digest" - keep state root hash only and validate transactions via ADProofs
      stateMode = "utxo"
      # Download block transactions and verify them (requires BlocksToKeep == 0 if disabled)
      verifyTransactions = true
      # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.
      # Keep all blocks from genesis if negative
      blocksToKeep = -1
      # Is the node is doing mining
      mining = true
      # Number of threads should be used for mining
      numberOfMiningWorkers = 1
      # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new
      # blockchain
      offlineGeneration = false
      # Delay for miner after succesful block creation
      miningDelay = 5s
      keepVersions = 200
      utxMaxAge = 1000m
      mempoolCleanupInterval = 180m
      mempoolMaxCapacity = 10000
      useCli = false
      sendStat = true
    }
    network {
      bindAddress = "0.0.0.0:9001"
      networkChunkSize = 150
      nodeName = "encry-node"
      localOnly = false
      knownPeers = []
      maxConnections = 20
      connectionTimeout = 1s
      # Enable UPnP tunnel creation only if you router/gateway supports it. Useful if your node is runnin in home
      # network. Completely useless if you node is in cloud.
      upnpEnabled = no
      handshakeTimeout = 30s
      syncInterval = 15s
      syncStatusRefresh = 30s
      syncIntervalStable = 20s
      syncTimeout = 5s
      syncStatusRefreshStable = 1m
      deliveryTimeout = 5s
      maxDeliveryChecks = 5
      toDownloadLifetime = 1h
      toDownloadRetryInterval = 10s
      appVersion = 0.3.2
      maxInvObjects = 150
      modifierDeliverTimeCheck = 30s
    }
    restApi {
      bindAddress = "0.0.0.0:9051"
      corsAllowed = true
      swaggerInfo {
        description = "The Web Interface to the Encry API",
        title = "Encry API",
        termsOfService = "License: Creative Commons CC0",
      }
      timeout = 5s
    }
    ntp {
      server = "pool.ntp.org"
      updateEvery = 30m
      timeout = 30s
    }
    testing {
      transactionGeneration = true
      defaultRecipientAddress = "3jSD9fwHEHJwHq99ARqhnNhqGXeKnkJMyX4FZjHV6L3PjbCmjG"
      # Maximum number of transaction generated per one epoch, set to -1 to avoid limiting
      limitPerEpoch = 100
    }
    influxDB {
      url = ""
      login = ""
      password = ""
    }
    keyManager {
      encryption = true
    }
  }
  akka {
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off
    persistence.journal.plugin = akka.persistence.journal.leveldb
    actor.warn-about-java-serializer-usage = false
    persistence.journal.leveldb {
      class = "akka.persistence.journal.leveldb.LeveldbJournal"
      plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
      replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"
      dir = "journal"
      fsync = on
      checksum = off
      native = on
      compaction-intervals {}
    }

    akka.persistence.snapshot-store.local {
      # Class name of the plugin.
      class = "akka.persistence.snapshot.local.LocalSnapshotStore"
      # Dispatcher for the plugin actor.
      plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
      # Dispatcher for streaming snapshot IO.
      stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"
      # Storage location of snapshot files.
      dir = "snapshots"
      # Number load attempts when recovering from the latest snapshot fails
      # yet older snapshot files are available. Each recovery attempt will try
      # to recover using an older than previously failed-on snapshot file
      # (if any are present). If all attempts fail the recovery will fail and
      # the persistent actor will be stopped.
      max-load-attempts = 3
    }

  }
  mining-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 2
    }
    throughput = 1
  }
  
  network-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 2
    }
    throughput = 1
  }
}
